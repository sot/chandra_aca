chandra_aca.snr_mag_for_t_ccd
=============================

.. py:function:: chandra_aca.snr_mag_for_t_ccd(t_ccd, ref_mag, ref_t_ccd, scale_4c=None)

   
   Calculate signal-to-noise equivalent magnitude.

   Given a t_ccd, solve for the magnitude that has the same expected signal
   to noise as ref_mag / ref_t_ccd.

   If scale_4c is None, the value from dark_model.DARK_SCALE_4C is used.

   To solve for the magnitude that has the expected signal to noise as
   ref_mag / ref_t_ccd, we use the following derivation::

     counts(mag) / noise(t_ccd) = counts(ref_mag) / noise(ref_t_ccd)
     noise(t_ccd) = noise(ref_t_ccd) * scale
     scale = scale_4c ** ((t_ccd - ref_t_ccd) / 4.0)

   Using the definition of counts as a function of magnitude, substituting in,
   reducing, and solving the original equality for mag gives::

     counts(mag) = ACA_CNT_RATE_MAG0 * 10.0 ** ((ACA_MAG0 - mag) / 2.5)
     ref_mag = (t_ccd - ref_t_ccd) * np.log10(scale_4c) / 1.6

   :Parameters:

       **t_ccd** : float, array
           CCD temperature (degC)

       **ref_mag** : float, array
           Reference magnitude (mag)

       **ref_t_ccd** : float, array
           Reference CCD temperature (degC)

       **scale_4c** : float
           Scale factor for a 4 degC change in CCD temperature (defaults to DARK_SCALE_4C)



   :Returns:

       float, array
           ..

       Magnitude(s) with the same expected signal to noise as ref_mag at ref_t_ccd
           ..











   ..
       !! processed by numpydoc !!
